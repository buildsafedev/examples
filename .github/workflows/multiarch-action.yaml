name: multiarch-build

on:
  push:

env:
  REGISTRY_IMAGES: docker.io/holiodin01/go-baseimage,docker.io/python-base,docker.io/rust-base

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create matrix
        id: platforms
        run: |
          echo 'matrix=["linux/amd64", "linux/arm64"]' >> $GITHUB_OUTPUT
      
      - name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGES }}
      
      - name: Rename meta bake definition file
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "/tmp/bake-meta.json"
      
      - name: Upload meta bake definition
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta
          path: /tmp/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build:
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: linux-arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: /tmp
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      
      - name: Install bsf
        run: |
          nix profile install github:buildsafedev/bsf
      
      - name: Loop through registry images
        run: |
          IFS=',' read -r -a images <<< "${{ env.REGISTRY_IMAGES }}"
          for image in "${images[@]}"; do
            case $image in
              *go-baseimage*)
                cd go-server-example
                ;;
              *python-base*)
                cd python
                ;;
              *rust-base*)
                cd rust
                ;;
            esac
            bsf oci pkgs --push --digest --dest-creds=${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}
            digest=$(cat bsf-result/digest)
            mkdir -p "/tmp/digests/${image##*/}-${{ matrix.platform }}"
            echo $digest > "/tmp/digests/${image##*/}-${{ matrix.platform }}/digest"
            cd ..
          done
      
      - name: Verify digest files
        run: |
          echo "Digest files created:"
          ls -l /tmp/digests/
      
      - name: Upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: /tmp
      
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Verify digest files after download
        run: |
          echo "Downloaded digest files:"
          ls -l /tmp/digests/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Create Go Baseimage manifest list and push
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("docker.io/holiodin01/go-baseimage")) | "-t " + .) | join(" ")' /tmp/bake-meta.json) \
            docker.io/holiodin01/go-baseimage@$(cat /tmp/digests/go-baseimage-linux/amd64/digest) \
            docker.io/holiodin01/go-baseimage@$(cat /tmp/digests/go-baseimage-linux/arm64/digest)
      
      - name: Create Python Baseimage manifest list and push
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("docker.io/python-base")) | "-t " + .) | join(" ")' /tmp/bake-meta.json) \
            docker.io/python-base@$(cat /tmp/digests/python-base-linux/amd64/digest) \
            docker.io/python-base@$(cat /tmp/digests/python-base-linux/arm64/digest)
      
      - name: Create Rust Baseimage manifest list and push
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("docker.io/rust-base")) | "-t " + .) | join(" ")' /tmp/bake-meta.json) \
            docker.io/rust-base@$(cat /tmp/digests/rust-base-linux/amd64/digest) \
            docker.io/rust-base@$(cat /tmp/digests/rust-base-linux/arm64/digest)
      
      - name: Inspect images
        run: |
          IFS=',' read -r -a images <<< "${{ env.REGISTRY_IMAGES }}"
          for image in "${images[@]}"; do
            docker buildx imagetools inspect $image
          done
      
      - name: Print Digests for Verification
        run: |
          for dir in /tmp/digests/*; do
            for file in "$dir"/*/digest; do
              echo "Digest: $(basename $file)"
            done
          done
      
      - name: Scan images with Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          IFS=',' read -r -a images <<< "${{ env.REGISTRY_IMAGES }}"
          for image in "${images[@]}"; do
            grype $image
          done
