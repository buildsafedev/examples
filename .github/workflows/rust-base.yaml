name: rust-base
env :
  image_tag: v1

on:
  push:

jobs:
  prepare-rust-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Prepare Action
        uses: buildsafedev/multiarch-build--action/prepare-action@main
        with:
          oci_registry_username: ${{ secrets.DOCKERHUB_USERNAME }}
          oci_registry_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          image_name: holiodin01/rust-base-dev
          ociBlock: rust-dev
          tag: ${{ env.image_tag }}

  prepare-rust-runtime:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Prepare Action
        uses: buildsafedev/multiarch-build--action/prepare-action@main
        with:
          oci_registry_username: ${{ secrets.DOCKERHUB_USERNAME }}
          oci_registry_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          image_name: holiodin01/rust-base-runtime
          ociBlock: rust-runtime
          tag:  ${{ env.image_tag }}

  build: 
    needs: [prepare-rust-dev, prepare-rust-runtime]
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, linux-arm64]  
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run Build Action
        uses: buildsafedev/multiarch-build--action/build-action@main
        with:
          oci_registry_username: ${{ secrets.DOCKER_USERNAME }}
          oci_registry_password: ${{ secrets.DOCKER_PASSWORD }}
          ociBlocks: rust-dev rust-runtime
          directory: 'rust'

  merge-dev:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run Merge Action
        uses: buildsafedev/multiarch-build--action/merge-action@main
        with:
          oci_registry_username: ${{ secrets.DOCKER_USERNAME }}
          oci_registry_password: ${{ secrets.DOCKER_PASSWORD }}
          image_name: holiodin01/rust-base-dev
          ociBlock: rust-dev
          tag:  ${{ env.image_tag }}
  merge-runtime:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run Merge Action
        uses: buildsafedev/multiarch-build--action/merge-action@main
        with:
          oci_registry_username: ${{ secrets.DOCKER_USERNAME }}
          oci_registry_password: ${{ secrets.DOCKER_PASSWORD }}
          image_name: holiodin01/rust-base-runtime
          ociBlock: rust-runtime
          tag:  ${{ env.image_tag }}

  sign-the-image:
    needs: [merge-dev, merge-runtime]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.4.1'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Sign and push image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          base_img_digest=$(docker manifest inspect holiodin01/rust-base-dev:${{ env.image_tag }} | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          runtime_img_digest=$(docker manifest inspect holiodin01/rust-base-runtime:${{ env.image_tag }} | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')

          cosign sign --yes holiodin01/rust-base-dev@${base_img_digest}
          cosign verify \
          --certificate-identity "https://github.com/buildsafedev/examples/.github/workflows/rust-base.yaml@refs/heads/multiarch-builds" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          holiodin01/rust-base-dev@${base_img_digest}

          cosign triangulate holiodin01/rust-base-dev@${base_img_digest}
            
          cosign sign --yes holiodin01/rust-base-runtime@${runtime_img_digest}
          cosign verify \
          --certificate-identity "https://github.com/buildsafedev/examples/.github/workflows/rust-base.yaml@refs/heads/multiarch-builds" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          holiodin01/rust-base-runtime@${runtime_img_digest}

          cosign triangulate holiodin01/rust-base-runtime@${runtime_img_digest}

          base_img_digest_arm=$(docker manifest inspect holiodin01/rust-base-dev:${{ env.image_tag }} | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')
          runtime_img_digest_arm=$(docker manifest inspect holiodin01/rust-base-dev:${{ env.image_tag }} | jq -r '.manifests[] | select(.platform.architecture == "arm64") | .digest')

          cosign sign --yes holiodin01/rust-base-dev@${base_img_digest_arm}
          cosign verify \
          --certificate-identity "https://github.com/buildsafedev/examples/.github/workflows/rust-base.yaml@refs/heads/multiarch-builds" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          holiodin01/rust-base-dev@${base_img_digest_arm}

          cosign triangulate holiodin01/rust-base-dev@${base_img_digest_arm}

          cosign sign --yes holiodin01/rust-base-runtime@${runtime_img_digest_arm}
          cosign verify \
          --certificate-identity "https://github.com/buildsafedev/examples/.github/workflows/rust-base.yaml@refs/heads/multiarch-builds" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          holiodin01/rust-base-dev@${runtime_img_digest_arm}

          cosign triangulate holiodin01/rust-base-dev@${runtime_img_digest_arm}

  
  hermetic_builds:
    needs: [merge-dev, merge-runtime]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name : Build hermetic image
        working-directory: rust
        run: |

          base_img_digest=$(docker manifest inspect holiodin01/rust-base-dev:${{ env.image_tag }} | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          runtime_img_digest=$(docker manifest inspect holiodin01/rust-base-runtime:${{ env.image_tag }} | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')


          docker buildx create --name mybuilder --use --driver docker-container

          docker buildx build \
            --build-arg BASE_IMAGE=holiodin01/rust-base-dev@${base_img_digest} \
            --build-arg RUNTIME_IMAGE=holiodin01/rust-base-runtime@${runtime_img_digest} \
            --no-cache \
            --tag holiodin01/rust-final:${{ env.image_tag }} \
            --network=none \
            --attest type=provenance,mode=min \
            --platform=linux/amd64 \
            --push \
            --output type=oci \
            https://github.com/buildsafedev/examples.git\#multiarch-builds:rust
        
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      
          # Setup Nix development environment make sure to use ./ before the path otherwise nix takes it as a https url
      - name: Setup Nix development environment
        uses: nicknovitski/nix-develop@v1
        with:
          arguments: ./rust/bsf/.#devShell
      
      - name: Is hermetic build
        run: |
            docker buildx imagetools inspect holiodin01/rust-final:${{ env.image_tag }} --format "{{ json .Provenance.SLSA }}" > slsa.json
            cat slsa.json
            if grep -q "https://mobyproject.org/buildkit@v1#hermetic\": true" slsa.json; then
              echo "Hermetic build"
            else
              echo "Not a hermetic build"
              exit 1
            fi
          
      # Check for vulnerabilities :)
      - name: Check for vulnerabilities
        run: grype holiodin01/rust-final:${{ env.image_tag }} --only-fixed --fail-on low


  sign-final-image:
    needs: hermetic_builds
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.4.1'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Sign and push image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |

          final_img_digest=$(docker manifest inspect holiodin01/rust-final:${{ env.image_tag }} | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          cosign sign --yes holiodin01/rust-final@${final_img_digest}
          cosign verify \
          --certificate-identity "https://github.com/buildsafedev/examples/.github/workflows/rust-base.yaml@refs/heads/multiarch-builds" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          holiodin01/rust-final@${final_img_digest}

          cosign triangulate holiodin01/rust-final@${final_img_digest}